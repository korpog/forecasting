holidays |>
gg_subseries(Trips) +
labs(y = "Overnight trips ('000)",
title = "Australian domestic holidays")
vic_elec |>
filter(year(Time) == 2014) |>
ggplot(aes(x = Temperature, y = Demand)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",
y = "Electricity demand (GW)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
visitors <- tourism |>
group_by(State) |>
summarise(Trips = sum(Trips))
visitors |>
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
labs(title = "Australian domestic tourism",
y= "Overnight trips ('000)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
library(fpp3)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# 2.8
recent_production |> ACF(Beer, lag_max = 9)
recent_production |>
ACF(Beer) |>
autoplot() + labs(title="Australian beer production")
a10 |>
ACF(Cost, lag_max = 48) |>
autoplot() +
labs(title="Australian antidiabetic drug sales")
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
y |> autoplot(wn) + labs(title = "White noise", y = "")
y |>
ACF(wn) |>
autoplot() + labs(title = "White noise")
# 2.10
aus_production$Bricks
# 2.10
?aus_production$Bricks
# 2.10
?aus_production
# 2.10
aus_production
?pelt
?gafa_stock
?vic_elec
bricks <- aus_production |>
select(Bricks)
bricks <- autoplot()
autoplot(bricks)
autoplot(bricks) + labs(title = "Bricks")
lynx <- pelt |>
select(Lynx)
autoplot(lynx) + labs(title = "Lynx")
bricks <- aus_production |>
select(Bricks)
autoplot(bricks, Bricks) + labs(title = "Bricks")
autoplot(aus_production, Bricks) + labs(title = "Bricks")
autoplot(pelt, Lynx) + labs(title = "Lynx")
autoplot(gafa_stock, Close) + labs(title = "Close")
autoplot(vic_elec, Demand) + labs(title = "Electricity Demand", x = "Date", y = "Electricity [MWh]")
autoplot(gafa_stock, Close) + labs(title = "Close")
library(fpp3)
library(GGally)
setwd("/home/korpog/Documents/prog3/forecasting")
pbs_features <- PBS |>
features(Cost, feature_set(pkgs = "feasts"))
pbs_features
pbs_features
PBS
View(pbs_features)
library(broom)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
prcomp(scale = TRUE) |>
augment(pbs_features)
near_zero_var <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
summarise(across(everything(), ~ var(.x))) |>
pivot_longer(everything(), names_to = "variable", values_to = "variance") |>
filter(variance < 1e-10)  # Adjust this threshold as needed
print(near_zero_var)
print(near_zero_var)
print(near_zero_var$variable)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
prcomp(scale = F) |>
augment(pbs_features)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
select(-all_of(near_zero_var$variable)) |>
prcomp(scale = TRUE) |>
augment(pbs_features)
near_zero_var <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
summarise(across(everything(), ~ var(.x))) |>
pivot_longer(everything(), names_to = "variable", values_to = "variance") |>
filter(variance < 1e-10)  # Adjust this threshold as needed
print(near_zero_var$variable)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
select(-all_of(near_zero_var$variable)) |>
prcomp(scale = TRUE) |>
augment(pbs_features)
pbs_features
near_zero_var <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
summarise(across(everything(), ~ var(.x))) |>
pivot_longer(everything(), names_to = "variable", values_to = "variance") |>
filter(variance < 1e-10)  # Adjust this threshold as needed
print(near_zero_var$variable)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
select(-all_of(near_zero_var$variable)) |>
prcomp(scale = FALSE) |>
augment(pbs_features)
near_zero_var <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
summarise(across(everything(), ~ var(.x))) |>
pivot_longer(everything(), names_to = "variable", values_to = "variance") |>
filter(variance < 1e-5)  # Adjust this threshold as needed
print(near_zero_var$variable)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
select(-all_of(near_zero_var$variable)) |>
prcomp(scale = T) |>
augment(pbs_features)
tourism_features <- tourism |>
features(Trips, feature_set(pkgs = "feasts"))
tourism_features
View(tourism_features)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2, -...26) |>
select(-all_of(near_zero_var$variable)) |>
prcomp(scale = T) |>
augment(pbs_features)
library(broom)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2, -...26) |>
prcomp(scale = F) |>
augment(pbs_features)
all( is.finite( pbs_features) )
all(is.finite(pbs_features))
sapply(pbs_features, is.finite)
pbs_features <- PBS |>
features(Cost, feature_set(pkgs = "feasts")) |>
select(-...26)
pbs_features
View(pbs_features)
View(pbs_features)
View(pbs_features)
View(pbs_features)
View(pbs_features)
library(broom)
pcs <- pbs_features |>
select(-Concession, -Type, -ATC1, -ATC2) |>
prcomp(scale = TRUE) |>
augment(pbs_features)
gc()
library(fpp3)
gdppc <- global_economy |>
mutate(GDP_per_capita = GDP / Population)
gdppc |>
filter(Country == "Sweden") |>
autoplot(GDP_per_capita) +
labs(y = "$US", title = "GDP per capita for Sweden")
fit <- gdppc |>
model(trend_model = TSLM(GDP_per_capita ~ trend()))
View(fit)
fit |> forecast(h = "3 years")
fit |>
forecast(h = "3 years") |>
filter(Country == "Sweden") |>
autoplot(gdppc) +
labs(y = "$US", title = "GDP per capita for Sweden")
bricks <- aus_production |>
filter_index("1970 Q1" ~ "2004 Q4") |>
select(Bricks)
bricks |> model(MEAN(Bricks))
bricks |> model(MEAN(Bricks)) |> autoplot()
bricks |> model(MEAN(Bricks))
bricks |> model(NAIVE(Bricks))
bricks |> model(SNAIVE(Bricks ~ lag("year")))
bricks |> model(RW(Bricks ~ drift()))
# Set training data from 1992 to 2006
train <- aus_production |>
filter_index("1992 Q1" ~ "2006 Q4")
# Fit the models
beer_fit <- train |>
model(
Mean = MEAN(Beer),
`Naïve` = NAIVE(Beer),
`Seasonal naïve` = SNAIVE(Beer)
)
# Generate forecasts for 14 quarters
beer_fc <- beer_fit |> forecast(h = 14)
# Plot forecasts against actual values
beer_fc |>
autoplot(train, level = NULL) +
autolayer(
filter_index(aus_production, "2007 Q1" ~ .),
colour = "black"
) +
labs(
y = "Megalitres",
title = "Forecasts for quarterly beer production"
) +
guides(colour = guide_legend(title = "Forecast"))
# Re-index based on trading days
google_stock <- gafa_stock |>
filter(Symbol == "GOOG", year(Date) >= 2015) |>
mutate(day = row_number()) |>
update_tsibble(index = day, regular = TRUE)
# Filter the year of interest
google_2015 <- google_stock |> filter(year(Date) == 2015)
# Fit the models
google_fit <- google_2015 |>
model(
Mean = MEAN(Close),
`Naïve` = NAIVE(Close),
Drift = NAIVE(Close ~ drift())
)
# Produce forecasts for the trading days in January 2016
google_jan_2016 <- google_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
google_fc <- google_fit |>
forecast(new_data = google_jan_2016)
# Plot the forecasts
google_fc |>
autoplot(google_2015, level = NULL) +
autolayer(google_jan_2016, Close, colour = "black") +
labs(y = "$US",
title = "Google daily closing stock prices",
subtitle = "(Jan 2015 - Jan 2016)") +
guides(colour = guide_legend(title = "Forecast"))
augment(beer_fit)
autoplot(google_2015, Close) +
labs(y = "$US",
title = "Google daily closing stock prices in 2015")
aug <- google_2015 |>
model(NAIVE(Close)) |>
augment()
autoplot(aug, .innov) +
labs(y = "$US",
title = "Residuals from the naïve method")
aug |>
ggplot(aes(x = .innov)) +
geom_histogram() +
labs(title = "Histogram of residuals")
aug |>
ACF(.innov) |>
autoplot() +
labs(title = "Residuals from the naïve method")
google_2015 |>
model(NAIVE(Close)) |>
gg_tsresiduals()
aug |> features(.innov, box_pierce, lag = 10)
aug |> features(.innov, ljung_box, lag = 10)
fit <- google_2015 |> model(RW(Close ~ drift()))
tidy(fit)
augment(fit) |> features(.innov, ljung_box, lag=10)
google_2015 |>
model(NAIVE(Close)) |>
forecast(h = 10) |>
hilo()
fit <- google_2015 |>
model(NAIVE(Close))
sim <- fit |> generate(h = 30, times = 5, bootstrap = TRUE)
sim
google_2015 |>
ggplot(aes(x = day)) +
geom_line(aes(y = Close)) +
geom_line(aes(y = .sim, colour = as.factor(.rep)),
data = sim) +
labs(title="Google daily closing stock price", y="$US" ) +
guides(colour = "none")
fc <- fit |> forecast(h = 30, bootstrap = TRUE)
fc
autoplot(fc, google_2015) +
labs(title="Google daily closing stock price", y="$US" )
google_2015 |>
model(NAIVE(Close)) |>
forecast(h = 10, bootstrap = TRUE, times = 1000) |>
hilo()
