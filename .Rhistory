holidays |>
gg_subseries(Trips) +
labs(y = "Overnight trips ('000)",
title = "Australian domestic holidays")
vic_elec |>
filter(year(Time) == 2014) |>
ggplot(aes(x = Temperature, y = Demand)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",
y = "Electricity demand (GW)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
visitors <- tourism |>
group_by(State) |>
summarise(Trips = sum(Trips))
visitors |>
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
labs(title = "Australian domestic tourism",
y= "Overnight trips ('000)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
library(fpp3)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# 2.8
recent_production |> ACF(Beer, lag_max = 9)
recent_production |>
ACF(Beer) |>
autoplot() + labs(title="Australian beer production")
a10 |>
ACF(Cost, lag_max = 48) |>
autoplot() +
labs(title="Australian antidiabetic drug sales")
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
y |> autoplot(wn) + labs(title = "White noise", y = "")
y |>
ACF(wn) |>
autoplot() + labs(title = "White noise")
# 2.10
aus_production$Bricks
# 2.10
?aus_production$Bricks
# 2.10
?aus_production
# 2.10
aus_production
?pelt
?gafa_stock
?vic_elec
bricks <- aus_production |>
select(Bricks)
bricks <- autoplot()
autoplot(bricks)
autoplot(bricks) + labs(title = "Bricks")
lynx <- pelt |>
select(Lynx)
autoplot(lynx) + labs(title = "Lynx")
bricks <- aus_production |>
select(Bricks)
autoplot(bricks, Bricks) + labs(title = "Bricks")
autoplot(aus_production, Bricks) + labs(title = "Bricks")
autoplot(pelt, Lynx) + labs(title = "Lynx")
autoplot(gafa_stock, Close) + labs(title = "Close")
autoplot(vic_elec, Demand) + labs(title = "Electricity Demand", x = "Date", y = "Electricity [MWh]")
autoplot(gafa_stock, Close) + labs(title = "Close")
us_retail_employment |>
model(
STL(Employed ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) |>
components() |>
autoplot()
library(fpp3)
setwd("/home/korpog/Documents/prog3/forecasting")
us_retail_employment <- us_employment |>
filter(year(Month) >= 1990, Title == "Retail Trade") |>
select(-Series_ID)
autoplot(us_retail_employment, Employed) +
labs(
y = "Persons (thousands)",
title = "Total employment in US retail"
)
us_retail_employment |>
model(
STL(Employed ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) |>
components() |>
autoplot()
# 3.7 exercises
global_economy
# 3.7 exercises
global_economy |>
autoplot(GDP/Population)
# 3.7 exercises
global_economy |>
autoplot(GDP/Population) +
geom_line()
global_economy |>
autoplot(GDP / Population) +
labs(title = "GDP per capita", y = "$US")
global_economy |>
filter(Country == "Australia") |>
autoplot(GDP / Population) +
labs(title = "GDP per capita", y = "$US")
global_economy |>
filter(Country == "USA") |>
autoplot(GDP / Population) +
labs(title = "GDP per capita", y = "$US")
# 3.7 exercises
glimpse(global_economy)
global_economy |>
filter(Country == "Afghanistan") |>
autoplot(GDP / Population) +
labs(title = "GDP per capita", y = "$US")
unique(global_economy$Country)
global_economy |>
filter(Country == "Ukraine") |>
autoplot(GDP / Population) +
labs(title = "GDP per capita", y = "$US")
global_economy |>
mutate(GDP_Capita = GDP / Population) |>
group_by(Country) |>
summarise(MaxGDPC = max(GDP_Capita, na.rm = T)) |>
arrange(desc(MaxGDPC)) |>
head(5)
global_economy |>
filter(is.na(GDP) | is.na(Population) | Population == 0) |>
mutate(GDP_Capita = GDP / Population) |>
group_by(Country) |>
summarise(MaxGDPC = max(GDP_Capita, na.rm = T)) |>
arrange(desc(MaxGDPC)) |>
head(5)
global_economy %>%
group_by(Country) %>%
filter(!any(is.na(GDP) | is.na(Population) | Population == 0)) %>%
ungroup() %>%
mutate(GDPperCapita = GDP / Population) %>%
group_by(Country) %>%
summarise(MaxGDPperCapita = max(GDPperCapita)) %>%
arrange(desc(MaxGDPperCapita)) %>%
head(5)
