holidays |>
gg_subseries(Trips) +
labs(y = "Overnight trips ('000)",
title = "Australian domestic holidays")
vic_elec |>
filter(year(Time) == 2014) |>
ggplot(aes(x = Temperature, y = Demand)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",
y = "Electricity demand (GW)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
visitors <- tourism |>
group_by(State) |>
summarise(Trips = sum(Trips))
visitors |>
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
labs(title = "Australian domestic tourism",
y= "Overnight trips ('000)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
library(fpp3)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# 2.8
recent_production |> ACF(Beer, lag_max = 9)
recent_production |>
ACF(Beer) |>
autoplot() + labs(title="Australian beer production")
a10 |>
ACF(Cost, lag_max = 48) |>
autoplot() +
labs(title="Australian antidiabetic drug sales")
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
y |> autoplot(wn) + labs(title = "White noise", y = "")
y |>
ACF(wn) |>
autoplot() + labs(title = "White noise")
# 2.10
aus_production$Bricks
# 2.10
?aus_production$Bricks
# 2.10
?aus_production
# 2.10
aus_production
?pelt
?gafa_stock
?vic_elec
bricks <- aus_production |>
select(Bricks)
bricks <- autoplot()
autoplot(bricks)
autoplot(bricks) + labs(title = "Bricks")
lynx <- pelt |>
select(Lynx)
autoplot(lynx) + labs(title = "Lynx")
bricks <- aus_production |>
select(Bricks)
autoplot(bricks, Bricks) + labs(title = "Bricks")
autoplot(aus_production, Bricks) + labs(title = "Bricks")
autoplot(pelt, Lynx) + labs(title = "Lynx")
autoplot(gafa_stock, Close) + labs(title = "Close")
autoplot(vic_elec, Demand) + labs(title = "Electricity Demand", x = "Date", y = "Electricity [MWh]")
autoplot(gafa_stock, Close) + labs(title = "Close")
library(fpp3)
setwd("/home/korpog/Documents/prog3/forecasting")
# 4.6 exercises
PBS
# 4.6 exercises
View(PBS)
pbs_stats <- PBS |>
group_by(ATC1) |>
summarise(
stats = list(mean_sd(Cost)),
.groups = "drop"
)
mean_sd <- function(data) {
mean <- mean(data, na.rm = T)
sd <- sd(data, na.rm = T)
return(list(m = mean, s = sd))
}
pbs_stats <- PBS |>
group_by(ATC1) |>
summarise(
stats = list(mean_sd(Cost)),
.groups = "drop"
)
View(pbs_stats)
compute_stats <- function(ts) {
mean_val <- mean(ts, na.rm = TRUE)
sd_val <- sd(ts, na.rm = TRUE)
return(list(mean = mean_val, sd = sd_val))
}
# Apply the function to PBS data
pbs_stats <- PBS %>%
group_by(ATC2, Concession) %>%
summarise(
stats = list(compute_stats(Cost)),
.groups = "drop"
) %>%
mutate(
mean = sapply(stats, function(x) x$mean),
sd = sapply(stats, function(x) x$sd)
)
View(pbs_stats)
pbs_stats <- PBS |>
group_by(ATC1) |>
mutate(
mean = sapply(Cost, mean),
sd = sapply(Cost, sd)
)
View(pbs_stats)
mean_sd <- function(data) {
mean <- mean(data, na.rm = T)
sd <- sd(data, na.rm = T)
return(list(m = mean, s = sd))
}
pbs_stats <- PBS |>
group_by(ATC1) |>
summarise(stats = list(mean_sd(Cost)),
.groups = "drop") |>
mutate(
mean = sapply(stats, function(x) x$mean),
sd = sapply(stats, function(x) x$sd)
)
View(pbs_stats)
mean_sd <- function(data) {
mean <- mean(data, na.rm = T)
sd <- sd(data, na.rm = T)
return(list(m = mean, s = sd))
}
pbs_stats <- PBS |>
group_by(ATC1) |>
summarise(stats = list(mean_sd(Cost)),
.groups = "drop") |>
mutate(
mean = sapply(stats, function(x) x$m),
sd = sapply(stats, function(x) x$s)
)
pbs_stats <- PBS |>
group_by(ATC1) |>
summarise(stats = list(mean_sd(Cost)),
.groups = "drop") |>
mutate(
mean = sapply(stats, function(x) x$m),
sd = sapply(stats, function(x) x$s)
) |>
select(-stats)
pbs_stats <- PBS |>
group_by(ATC1) |>
index_by(Month) |>
summarise(stats = list(mean_sd(Cost)),
.groups = "drop") |>
mutate(
mean = sapply(stats, function(x) x$m),
sd = sapply(stats, function(x) x$s)
) |>
select(-stats)
PBS |>
features(Cost, list(mean = mean, stdev = sd)) |>
arrange(mean)
pbs_s <- PBS |>
features(Cost, list(mean = mean, stdev = sd)) |>
max_mean <- pbs_s |> slice_max(mean, n = 1)
pbs_s <- PBS |>
features(Cost, list(mean = mean, stdev = sd))
max_mean <- pbs_s |> slice_max(mean, n = 1)
View(max_mean)
min_sd <- pbs_s |> slice_min(stdev, n = 1)
View(min_sd)
max_mean |> autoplot()
View(max_mean)
PBS |>
filter(Concession == "Concessional", Type == "Co-payments", ATC1 == 1,
ATC2 == 10) |> autoplot()
PBS |>
filter(Concession == "Concessional", Type == "Co-payments", ATC1 == 1,
ATC2 == 10) |> autoplot(Cost)
tourism |>
filter(Purpose == "Holiday")
features(Trips, feat_stl) |>
GGally::ggpairs()
tourism |>
filter(Purpose == "Holiday") |>
features(Trips, feat_stl) |>
GGally::ggpairs()
tourism |>
filter(Purpose == "Holiday") |>
features(Trips, feat_stl)
tourism_features <- tourism %>%
filter(Purpose == "Holiday") %>%
features(Trips, feat_stl) %>%
mutate(
State = factor(State),
seasonal_peak_year = factor(seasonal_peak_year),
seasonal_trough_year = factor(seasonal_trough_year)
)
View(tourism_features)
tourism_features <- tourism |>
filter(Purpose == "Holiday") |>
features(Trips, feat_stl) |>
mutate(
State = factor(State),
seasonal_peak_year = factor(seasonal_peak_year),
seasonal_trough_year = factor(seasonal_trough_year)
)
ggpairs(tourism_features,
columns = c("trend_strength", "seasonal_strength_year",
"seasonal_peak_year", "seasonal_trough_year"),
mapping = aes(color = State, alpha = 0.6))
library(GGally)
tourism_features <- tourism |>
filter(Purpose == "Holiday") |>
features(Trips, feat_stl) |>
mutate(
State = factor(State),
seasonal_peak_year = factor(seasonal_peak_year),
seasonal_trough_year = factor(seasonal_trough_year)
)
ggpairs(tourism_features,
columns = c("trend_strength", "seasonal_strength_year",
"seasonal_peak_year", "seasonal_trough_year"),
mapping = aes(color = State, alpha = 0.6))
ggpairs(tourism_features,
columns = c("trend_strength", "seasonal_strength_year",
"seasonal_peak_year", "seasonal_trough_year"),
mapping = aes(color = State, alpha = 0.6),
upper = list(continuous = wrap("cor", size = 2.5))) +
theme_minimal()
peak_quarters <- tourism_features |>
group_by(State |>
summarise(Peak_Quarter = seasonal_peak_year[1])
print(peak_quarters)
peak_quarters <- tourism_features |>
group_by(State) |>
summarise(Peak_Quarter = seasonal_peak_year[1])
print(peak_quarters)
